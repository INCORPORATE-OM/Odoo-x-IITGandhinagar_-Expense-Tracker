// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  country   String
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users             User[]
  expenses          Expense[]
  approvalSequences ApprovalSequence[]
  approvalRules     ApprovalRule[]

  @@map("companies")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  role      String   @default("EMPLOYEE")
  companyId Int
  reportsTo Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager   User?             @relation("ManagerEmployee", fields: [reportsTo], references: [id])
  employees User[]            @relation("ManagerEmployee")
  expenses  Expense[]
  approvals ExpenseApproval[]

  @@map("users")
}

model Expense {
  id               Int      @id @default(autoincrement())
  userId           Int
  companyId        Int
  originalAmount   Float
  originalCurrency String
  companyAmount    Float?
  companyCurrency  String?
  category         String
  description      String?
  date             DateTime
  status           String   @default("PENDING")
  receiptPath      String?
  receiptUrl       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approvals ExpenseApproval[]

  @@map("expenses")
}

model ApprovalSequence {
  id        Int      @id @default(autoincrement())
  companyId Int
  sequence  String // JSON string: [{"type": "role", "value": "manager"}, {"type": "user", "value": 123}]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("approval_sequences")
}

model ExpenseApproval {
  id           Int      @id @default(autoincrement())
  expenseId    Int
  approverId   Int?
  approverRole String?
  status       String   @default("PENDING")
  comment      String?
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  expense  Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approver User?   @relation(fields: [approverId], references: [id])

  @@map("expense_approvals")
}

model ApprovalRule {
  id                 Int      @id @default(autoincrement())
  companyId          Int
  ruleType           String // PERCENTAGE, SPECIFIC, HYBRID
  threshold          Float? // For percentage rules (0-1)
  specificApproverId Int?
  specificRole       String?
  config             String? // JSON string for additional configuration
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("approval_rules")
}
